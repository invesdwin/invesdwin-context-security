<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<bean id="samlProperties"
		class="de.invesdwin.context.system.properties.SystemPropertiesDefinition" />

	<!-- activate beans in saml extension -->
	<context:component-scan base-package="org.springframework.security.saml" />

	<!-- Secured pages with SAML as entry point; use the following http tag -->
	<security:http entry-point-ref="samlEntryPoint"
		use-expressions="false" pattern="/saml/**">

		<security:csrf disabled="true" />
		<security:headers>
			<security:frame-options policy="SAMEORIGIN" />
			<security:content-type-options disabled="true" />
		</security:headers>

		<!-- <security:intercept-url pattern="/saml/**" access="IS_AUTHENTICATED_FULLY" 
			/> -->

		<security:custom-filter before="FIRST"
			ref="metadataGeneratorFilter" />
		<security:custom-filter after="BASIC_AUTH_FILTER"
			ref="samlFilter" />
	</security:http>

	<!-- Filters for processing of SAML messages -->
	<bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant">
			<!-- URLs are fixed by the appropriate filter implementations via constants -->
			<security:filter-chain pattern="/saml/login"
				filters="samlEntryPoint" />
			<security:filter-chain pattern="/saml/logout"
				filters="samlLogoutFilter" />
			<security:filter-chain pattern="/saml/metadata"
				filters="metadataDisplayFilter" />
			<security:filter-chain pattern="/saml/SSO"
				filters="samlWebSSOProcessingFilter" />
			<security:filter-chain pattern="/saml/HoKSSO"
				filters="samlWebSSOHoKProcessingFilter" />
			<security:filter-chain pattern="/saml/SingleLogout"
				filters="samlLogoutProcessingFilter" />
		</security:filter-chain-map>
	</bean>

	<!-- Handler deciding where to redirect user after successful login -->
	<bean id="successRedirectHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<!-- surrounding web application needs to provide this url -->
		<property name="defaultTargetUrl" value="/saml/LoginSuccess" />
	</bean>

	<!-- Handler deciding where to redirect user after failed login -->
	<bean id="failureRedirectHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="useForward" value="true" />
		<!-- surrounding web application needs to provide this url -->
		<property name="defaultFailureUrl" value="/internalerror" />
	</bean>

	<!-- Handler for successful logout -->
	<bean id="successLogoutHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<!-- surrounding web application needs to provide this url -->
		<property name="defaultTargetUrl" value="/saml/LogoutSuccess" />
	</bean>

	<security:authentication-manager id="samlAuthenticationManager">
		<!-- Register authentication manager for SAML provider -->
		<security:authentication-provider
			ref="samlAuthenticationProvider" />
	</security:authentication-manager>

	<!-- allow logging of error messages -->
	<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger" />

	<!-- Central storage of cryptographic keys -->
	<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
		<constructor-arg
			value="${de.invesdwin.context.security.web.saml.SamlProperties.KEYSTORE_RESOURCE}" />
		<constructor-arg type="java.lang.String"
			value="${de.invesdwin.context.security.web.saml.SamlProperties.KEYSTORE_STOREPASS}" />
		<constructor-arg>
			<map>
				<entry
					key="${de.invesdwin.context.security.web.saml.SamlProperties.KEYSTORE_ALIAS}"
					value="${de.invesdwin.context.security.web.saml.SamlProperties.KEYSTORE_KEYPASS}" />
			</map>
		</constructor-arg>
		<constructor-arg type="java.lang.String"
			value="${de.invesdwin.context.security.web.saml.SamlProperties.KEYSTORE_ALIAS}" />
	</bean>

	<!-- Entry point to initialize authentication, default values taken from 
		properties file -->
	<bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
		<property name="defaultProfileOptions">
			<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
				<property name="includeScoping" value="false" />
			</bean>
		</property>
	</bean>

	<!-- Filter automatically generates default SP metadata -->
	<bean id="metadataGeneratorFilter"
		class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
		<constructor-arg>
			<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
				<property name="entityId"
					value="${de.invesdwin.context.security.web.saml.SamlProperties.ENTITY_ID}" />
				<property name="entityBaseURL"
					value="${de.invesdwin.context.security.web.saml.SamlProperties.ENTITY_BASE_URL}" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- The filter is waiting for connections on URL suffixed with filterSuffix 
		and presents SP metadata there -->
	<bean id="metadataDisplayFilter"
		class="org.springframework.security.saml.metadata.MetadataDisplayFilter" />

	<bean id="metadata"
		class="org.springframework.security.saml.metadata.CachingMetadataManager">
		<constructor-arg>
			<list>
				<bean
					class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
					<constructor-arg>
						<bean class="java.util.Timer" />
					</constructor-arg>
					<constructor-arg>
						<bean
							class="de.invesdwin.context.security.web.saml.internal.DelegateOpenSamlResource">
							<constructor-arg
								value="${de.invesdwin.context.security.web.saml.SamlProperties.IDP_METADATA_RESOURCE}" />
						</bean>
					</constructor-arg>
					<property name="parserPool" ref="parserPool" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML Authentication Provider responsible for validating of received 
		SAML messages -->
	<bean id="samlAuthenticationProvider"
		class="org.springframework.security.saml.SAMLAuthenticationProvider">
		<!-- OPTIONAL property: can be used to store/load user data after login -->
		<property name="userDetails" ref="samlUserDetailsService" />
	</bean>

	<bean id="samlUserDetailsService"
		class="de.invesdwin.context.security.web.saml.internal.RoleAddingSamlUserDetailsService" />

	<!-- Provider of default SAML Context -->
	<bean id="contextProvider"
		class="org.springframework.security.saml.context.SAMLContextProviderImpl" />

	<!-- Processing filter for WebSSO profile messages -->
	<bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
		<property name="authenticationManager" ref="samlAuthenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Processing filter for WebSSO Holder-of-Key profile -->
	<bean id="samlWebSSOHoKProcessingFilter"
		class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
		<property name="authenticationManager" ref="samlAuthenticationManager" />
		<property name="authenticationSuccessHandler" ref="successRedirectHandler" />
		<property name="authenticationFailureHandler" ref="failureRedirectHandler" />
	</bean>

	<!-- Logout handler terminating local session -->
	<bean id="logoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="false" />
	</bean>

	<!-- Override default logout processing filter with the one processing SAML 
		messages -->
	<bean id="samlLogoutFilter" class="org.springframework.security.saml.SAMLLogoutFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
		<constructor-arg index="2" ref="logoutHandler" />
	</bean>

	<!-- Filter processing incoming logout messages -->
	<!-- First argument determines URL user will be redirected to after successful 
		global logout -->
	<bean id="samlLogoutProcessingFilter"
		class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
		<constructor-arg index="0" ref="successLogoutHandler" />
		<constructor-arg index="1" ref="logoutHandler" />
	</bean>

	<!-- Class loading incoming SAML messages from httpRequest stream -->
	<bean id="processor"
		class="org.springframework.security.saml.processor.SAMLProcessorImpl">
		<constructor-arg>
			<list>
				<ref bean="redirectBinding" />
				<ref bean="postBinding" />
				<ref bean="artifactBinding" />
				<ref bean="soapBinding" />
				<ref bean="paosBinding" />
			</list>
		</constructor-arg>
	</bean>

	<!-- SAML 2.0 WebSSO Assertion Consumer -->
	<bean id="webSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl" />

	<!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
	<bean id="hokWebSSOprofileConsumer"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 Web SSO profile -->
	<bean id="webSSOprofile"
		class="org.springframework.security.saml.websso.WebSSOProfileImpl" />

	<!-- SAML 2.0 Holder-of-Key Web SSO profile -->
	<bean id="hokWebSSOProfile"
		class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl" />

	<!-- SAML 2.0 ECP profile -->
	<bean id="ecpprofile"
		class="org.springframework.security.saml.websso.WebSSOProfileECPImpl" />

	<!-- SAML 2.0 Logout Profile -->
	<bean id="logoutprofile"
		class="org.springframework.security.saml.websso.SingleLogoutProfileImpl" />

	<!-- Bindings, encoders and decoders used for creating and parsing messages -->
	<bean id="postBinding"
		class="org.springframework.security.saml.processor.HTTPPostBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
	</bean>

	<bean id="redirectBinding"
		class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="artifactBinding"
		class="org.springframework.security.saml.processor.HTTPArtifactBinding">
		<constructor-arg ref="parserPool" />
		<constructor-arg ref="velocityEngine" />
		<constructor-arg>
			<bean
				class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
				<constructor-arg>
					<bean class="org.apache.commons.httpclient.HttpClient">
						<constructor-arg>
							<bean
								class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager" />
						</constructor-arg>
					</bean>
				</constructor-arg>
				<property name="processor">
					<bean
						class="org.springframework.security.saml.processor.SAMLProcessorImpl">
						<constructor-arg ref="soapBinding" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="soapBinding"
		class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<bean id="paosBinding"
		class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
		<constructor-arg ref="parserPool" />
	</bean>

	<!-- Initialization of OpenSAML library -->
	<bean class="org.springframework.security.saml.SAMLBootstrap" />

	<!-- Initialization of the velocity engine -->
	<bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory"
		factory-method="getEngine" />

	<!-- XML parser pool needed for OpenSAML parsing -->
	<bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool"
		init-method="initialize">
		<property name="builderFeatures">
			<map>
				<entry key="http://apache.org/xml/features/dom/defer-node-expansion"
					value="false" />
			</map>
		</property>
	</bean>

	<bean id="parserPoolHolder"
		class="org.springframework.security.saml.parser.ParserPoolHolder" />

</beans>